
MindBrige_image_GIT_ViT_mse_mae starting with epoch 0 / 200
  0%|                                                                                                                                                 | 0/200 [00:00<?, ?it/s]
>>> Epoch0 | Iter0 | voxel: torch.Size([1600, 8192])
  0%|                                                                                                                                                 | 0/200 [00:12<?, ?it/s]
Traceback (most recent call last):
  File "/media/SSD_1_2T/xt/MindBridge/src/main.py", line 288, in <module>
    main()
  File "/media/SSD_1_2T/xt/MindBridge/src/main.py", line 282, in main
    trainer.train(local_rank)
  File "/media/SSD_1_2T/xt/MindBridge/src/trainer_fmri_img_GIT.py", line 164, in train
    self.train_epoch(epoch)
  File "/media/SSD_1_2T/xt/MindBridge/src/trainer_fmri_img_GIT.py", line 634, in train_epoch
    self.train_step(voxel, image, subj_id, epoch)
  File "/media/SSD_1_2T/xt/MindBridge/src/trainer_fmri_img_GIT.py", line 197, in train_step
    git_feature_map = self.clip_extractor.embed_image_for_GIT(image)
  File "/media/SSD_1_2T/xt/MindBridge/src/models.py", line 212, in embed_image_for_GIT
    clip_emb = self.git_image_encoder(pixel_values.to(self.device)).last_hidden_state
  File "/home/fmri/miniconda3/envs/xt/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/fmri/miniconda3/envs/xt/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/media/SSD_1_2T/xt/MindBridge/src/modeling_git.py", line 1014, in forward
    return self.vision_model(
  File "/home/fmri/miniconda3/envs/xt/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/fmri/miniconda3/envs/xt/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/media/SSD_1_2T/xt/MindBridge/src/modeling_git.py", line 944, in forward
    encoder_outputs = self.encoder(
  File "/home/fmri/miniconda3/envs/xt/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/fmri/miniconda3/envs/xt/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/media/SSD_1_2T/xt/MindBridge/src/modeling_git.py", line 872, in forward
    layer_outputs = encoder_layer(
  File "/home/fmri/miniconda3/envs/xt/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/fmri/miniconda3/envs/xt/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/media/SSD_1_2T/xt/MindBridge/src/modeling_git.py", line 772, in forward
    hidden_states, attn_weights = self.self_attn(
  File "/home/fmri/miniconda3/envs/xt/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/fmri/miniconda3/envs/xt/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/media/SSD_1_2T/xt/MindBridge/src/modeling_git.py", line 711, in forward
    attn_weights = nn.functional.softmax(attn_weights, dim = -1)
  File "/home/fmri/miniconda3/envs/xt/lib/python3.10/site-packages/torch/nn/functional.py", line 1856, in softmax
    ret = input.softmax(dim)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 2.78 GiB. GPU 0 has a total capacty of 23.65 GiB of which 2.23 GiB is free. Including non-PyTorch memory, this process has 21.40 GiB memory in use. Of the allocated memory 15.09 GiB is allocated by PyTorch, and 5.89 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF